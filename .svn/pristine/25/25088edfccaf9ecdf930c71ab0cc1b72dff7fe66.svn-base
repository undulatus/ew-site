import { Component, OnInit, AfterViewInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { GoogleSignInSuccess } from 'angular-google-signin';
import { AuthenticationService } from './auth.service';
import { LocalStorageService } from 'angular-2-local-storage';
import { User } from '../domain/user.model';
declare const gapi: any;
@Component({
    moduleId: module.id,
    templateUrl: 'login.component.html'
})

export class LoginComponent implements OnInit, AfterViewInit {
    model: any = {};
    loading = false;
    returnUrl: string;
    profile: any = {};
    currentUser: User;
    private auth2: any;
    private _googleAuth: gapi.auth2.GoogleAuth;
    private myClientId: string = '360582617344-4uqrt932alcqjub8qo74pj52uf55qr43.apps.googleusercontent.com';
    private _isLoggedIn:boolean = false;
    constructor(
        private route: ActivatedRoute,
        private router: Router,
        private localStorageService: LocalStorageService
        /*private authenticationService: AuthenticationService*/
        ) { }

    ngAfterViewInit() {

    }
    ngOnInit() {
        // reset login status
        //this.authenticationService.logout();

        // get return url from route parameters or default to '/'
        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
    }

    onGoogleSignInSuccess(event: GoogleSignInSuccess) {
        let googleUser: gapi.auth2.GoogleUser = event.googleUser;
        let id: string = googleUser.getId();
        let profile: gapi.auth2.BasicProfile = googleUser.getBasicProfile();
        var auth_token = googleUser.getAuthResponse().id_token;
        this._googleAuth = gapi.auth2.getAuthInstance();
        this._isLoggedIn = googleUser.isSignedIn();
        console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.
        console.log('Name: ' + profile.getImageUrl());
        console.log('Name: ' + profile.getName());
        console.log('Google id token: ' + auth_token);
        this.currentUser = {
                        username: profile.getName(),
                        imageUrl: profile.getImageUrl(),
                        systemRole: '',
                        employeeId:0
                    };
            this.localStorageService.set('currentUser', JSON.stringify(this.currentUser));
        //this.handleSuccessLogin(this._googleAuth, auth_token, googleUser);
        this.router.navigate([this.returnUrl]);
    }

    loginChecker(){
        if(this._isLoggedIn){
            this.router.navigate([this.returnUrl]);
        }
    }
    logOut() {
        this._googleAuth.signOut().then(function () {
            console.log('User signed out.');
        });
    }
    /* login() {
         this.loading = true;
         this.authenticationService.login(this.model.username, this.model.password)
             .subscribe(
             data => {
                 this.router.navigate([this.returnUrl]);
             },
             error => {
                 console.log(error);
                 this.loading = false;
             });
     }*/
}