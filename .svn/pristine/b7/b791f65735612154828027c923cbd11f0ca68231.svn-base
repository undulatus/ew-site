import { Component, OnInit, ViewChild, Input, Output, ViewContainerRef, AfterViewInit } from '@angular/core';
import { Activity } from '../domain/activity.model';
import { ActivityService } from '../services/activity.service';
import { OpportunityActivity } from '../domain/opportunity-activity.model';

import { ModalDirective, ModalOptions } from 'ng2-bootstrap/modal';

@Component({
    selector: 'activity-breakdown',
    templateUrl: 'activity-breakdown.component.html',
    styleUrls: ['./activity-breakdown.component.css'],
    providers: [ActivityService]
})

export class ActivityBreakdownComponent implements OnInit, AfterViewInit {
    @Input() projectDuration: number;
    @Input() scheduleGranularity: number;
    // @Input() opportunityActivities: OpportunityActivity[];

    @ViewChild('activityModal') public addActivityModal: ModalDirective;
    @ViewChild('addModalActivity') addModalActivity;
    @ViewChild('activityList') activityList;
    @ViewChild('activityRole') activityRole;
    @ViewChild('activityTechnology') activityTechnology;
    @ViewChild('activityPayLevel') activityPayLevel;
    @ViewChild('activityBillability') activityBillability;

    errorMessage: string;
    opportunityActivity: OpportunityActivity;
    opportunityActivities: OpportunityActivity[];
    activity: Activity;
    activities: Activity[];
    activityRoles = ['Manager', 'Developer', 'BA'];
    activityTechnologies = ['Iterative', 'Java'];
    activityPayLevels = ['PM', 'SE5', 'SE4', 'SE3', 'SE2', 'SE1'];
    activityBillabilities = ['Yes', 'No'];

    dtActivityBreakdownOptions: any = {};
    actId: any = '';
    selectedIdx = 0;
    items: any = [];

    private body: String;
    private category: String;

    private notifOptions: ModalOptions = {
        backdrop: false,
        keyboard: true,
        focus: true,
        ignoreBackdropClick: true
    };

    constructor(
        private viewContainerRef: ViewContainerRef,
        private activityService: ActivityService
    ) { }

    ngOnInit(): void {
        this.addActivityModal.config = this.notifOptions;

        this.dtActivityBreakdownOptions = {
            paging: false,
            searching: false,
            info: false
        };

        this.opportunityActivities = new Array<OpportunityActivity>();
        this.activity = new Activity();
        this.getActivities();
    }

    confirmAction() {
        this.activity = new Activity();
        this.activity.activityId = this.addModalActivity.nativeElement.value;
        
        this.opportunityActivity = new OpportunityActivity();
        this.opportunityActivity.activity = this.activity;
        // console.log('opportunityActivity: ', this.opportunityActivity);

        this.opportunityActivities.push(this.opportunityActivity);
        console.log('opportunityActivities: ', this.opportunityActivities);

        this.addActivityModal.hide();
    }

    check() {
        console.log("opportunityActivities: ", this.opportunityActivities);
    }

    show() {
        this.addActivityModal.show();
    }
    hide() {
        this.addActivityModal.hide();
    }
    cancelAction() {
        this.addActivityModal.hide();
    }

    isSelectActivityValid() {
        return this.addModalActivity.nativeElement.value == 0;
    }

    getActivities() {
        this.activityService.getActivities().then(activities=>{
            this.activities = activities;
        }).catch(error => this.errorMessage = <any>error);
    }

    ngAfterViewInit(): void {
        this.actId = this.activityList.nativeElement.querySelector('li:nth-child(n+2)').attributes.id.nodeValue;
    }

    selectItem(index): void {
        this.selectedIdx = index;
    }

    createRange(number) {
        this.items = [];
        for (var i = 1; i <= number; i++) {
            this.items.push(i);
        }
        return this.items;
    }

    removeEmptyValue(el) {
        if (el.children[0].value == 0) el.children[0].remove();
    }

    public tabs: any[] = [
        {
            id: 1,
            title: 'Requirements Engineering',
            // removable: true,
            resource: [{
                role: 'Project Manager',
                technology: 'Iterative',
                paylevel: 'PM',
                billable: 'Yes',
                period: [0.2, 1.0]
            }, {
                role: 'Developer',
                technology: 'Iterative',
                paylevel: 'SE4',
                billable: 'No',
                period: [0.3, 1.0, 0.7]
            }]
        }, {
            id: 2,
            title: 'Application Management',
            // removable: true,
            resource: [{
                role: 'QA',
                technology: 'Iterative',
                paylevel: 'SE3',
                billable: 'No',
                period: [0.4, 1.0, 0.8, 0.6]
            }, {
                role: 'BA',
                technology: 'Iterative',
                paylevel: 'SE2',
                billable: 'Yes',
                period: [0.5, 1.0, 0.9]
            }]
        }
    ];

}